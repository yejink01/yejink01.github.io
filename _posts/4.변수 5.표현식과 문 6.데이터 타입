# 04. 변수

셀 하나의 크기는 1바이트(8비트)이며, 컴퓨터는 메모리 셀의 크기, 즉 1 바이트 단위로 데이터를 저장하거나 읽어들인다

<u>변수: 메모리 공간 자체 or 메모리 공간 식별</u>

식별자는 값이 아니라 메모리 주소를 기억하고 있다

<u>변수선언</u>

var에는 여러 단점이 있다. (함수 레벨 스코프 지원하기에 의도치않게 전역 변수가 선언되어 심각한 부작용 발생 가능)

var score: 자동으로 undefined  할당(암묵적 초기화)

referenceerror - 식별자를 통해 값dmf 참조하려 했지만 등록된 식별자를 찾을 수 없을 때 발생하는 에러

<u>변수호이스팅</u>

: 변수 선언문이 코드의 선두로 끌어올려진 것처럼 동작하는 자바스크립트 고유의 특징

```
console.log(score);
var score;
// 참조에러가 발생하지 않고 undefined 출력 
```

```
console.log(score);

score = 50;
score = 80;

var score;
console.log(scrore);
```

결과값은 80이 나온다. (이유 = 변수 호이스팅을 통해 var score;가 맨 앞으로 올려짐)

```
var score;
console.log(score);

score = 50;
score = 80;

console.log(score);```

50이 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 재할당 값 80을 새롭게 저장x
=> 새로운 메모리 공간을 확보하고 그 메모리 공간에 숫자 값 80을 저장한다. 
```

<u>변수 이름</u>

- var person, val1, first_name; 쉼표(,)로 한 번에 여러개 선언 가능but 가독성이 나쁘다. 

- 첫 글자가 숫자가 오면 안되며 변수이름으로 '-' 표시를 쓰면 안된다

- 대소문자를 구별하므로 다음 둘은 다르다

```
var firstname;
var Firstname;
```



# 05. 표현식과 문

변수에 할당되는 것은 값이다

```
var sum = 10+20;
// 변수에는 10+20이 평가되어 생성된 숫자 값 30이 할당된다. 
```



<u>리터럴</u>

사람이 이해할 수 있는 숫자 또는 약속된 기호를 사용해 값을 생성하는 표기법

=  즉 사람이 이해할 수 있는 문자 또는 미리 약속된 기호로 표기된 코드

ex) 정수 리터럴, 2진수 리터럴, null 리터럴 등등



<u>표현식</u>

값으로 평가될 수 있는 문으로 새로운 값 생성/기존 값 참조

var score = 50+50 

50+50 리터럴과 연산자로 이뤄져 있다. 숫자 100을 생성하므로 표현식이다.

즉 값으로 평가될 수 있는 문은 모두 표현식이다. 

<u>문</u>

프로그램을 구성하는 기본 단위이자 최소 실행 단위, 컴퓨터에 내리는 명령

<u>문을 구성하는 토큰</u>

문법적인 의미를 가지며 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소

ex) 반복문을 실행하면 특정 코드 블록이 반복 실행된다. 



문 

- 표현식인 문(값으로 평가될 수 있음) 
- 표현식이 아닌 문(값으로 평가 x)

```
//표현식이 아닌 문은 값처럼 사용할 수 없다. 
var foo = var x;

var foo = if (x>1);// syntaxerror

// 표현식인 문은 값처럼 사용할 수 있다. 

var foo = x = 100;

console.log (foo); //100

```



# 06장. 데이터 타입

<u>데이터 타입</u>

- 값의 종류

- 자바스크립트의 숫자 타입은 정수만을 위한 타입이 없고 <u>모든 수를 실수</u>로 처리한다. 

```
정수로 표시되도 사실은 실수!
console.log(1===1.0) // true
```

숫자 타입은 추가적으로 세 가지 특별한 값도 표현 가능

- console.log(10/0); //Infinity
- console.log(10/-0);//-Infinity
- console.log(1*'String');//NaN(대소문자 구별 필수)



문자열)  ' ', " ", ``으로 감싸는데 만약 감싸지 않으면 스페이스 같은 공백 문자도 포함 시킬 수 없다.

표현식을 삽입하려면 ${} 로 표현식을 감싼다.

이때 표현식의 평가결과가 문자열이 아니더라도 문자열로 <u>타입이 강제로 변환</u>되어 삽입된다. 

```
예시)

console.log(` 1+2 = ${1+2}``); // 1+2 =3

표현식 삽입은 반드시 템플릿 리터럴(``` `)내에서 사용해야한다

console.log(`'1+2 = ${1+2}'`); // 1+2 = ${1+2}
```

<u>심벌</u>

- 변경 불가능한 원시 타입의 값이다.

- 다른 값과 절대 중복되지 않은 유일무이한 값이다. 



<u>데이터 타입이 필요한 이유</u>

- 값을 저장할 때 확보해야하는 메모리 공간의 크기를 결정하기 위해
- 값을 차조할 대 한 번에 읽어들여야 할 메모리 간의 크기를 결정하기 위해
- 메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해

<u>동적 타이핑</u>

- 자바스크립트는 정적 타입 언어와 다르게 변수를 선언할 때 타입 선언을 하지 않는다. 

- 자바스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정된다. 그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다. 이러한 특징을 동적타이핑이라하고 js는 동적 타입언어라고 한다. 



<u>변수는 타입을 가질까?</u>

NO, but 변수에 할당되어 있는 값에 의해 변수의 타입이 동적으로 결정된다고 표현하는 것이 적절
