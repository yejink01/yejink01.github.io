타입변환과 단축평가

타입변환이란?
- 명시적 타입 변환
  : 개발자가 의도적으로 값의 타입을 변환하는 것
- 암묵적 타입변환
  : 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되는 것
 * 때로는 명시적 타입 변환보다 암묵적 타입변환이 가독성 측면에서 더 좋을 수 도 있다.
  ex)  (10).toString()보다 10+''이 더욱 간결하고 이해하기 쉽다
  
  
# 암묵적 타입 변환
- 문자열 타입변환
```
1+'2' //12
1+1 =${1+1}
```
-숫자 타입으로 변환
```
1 - '1' //0
'1' > 0 //true
```

- 불리언 타입으로 변환
if ('') console.log(x);

### 명시적 타입 변환
빌트인 생성자함수는 객체를 생성하기 위한 함수이며 new연산자와 함께 호출된다. 
- 문자열 타입으로 변환
1. string 생성자 함수를 new 연산자 없이 호출하는 방법
```
String(1); // "1"
String(NaN); // "NaN"
String(true); // "true"
```

2. Object.prototype.toString 메서드를 사용하는 방법
```
(1).toString(); //"1"
(NaN).toString(); //"NaN"
(Infinity).toString(); //"Infinity"
(true).toString(); // "true"
```

3. 문자열 연결 연산자를 이용하는 방법
```
1+''; "1"
true + ``; "true"
```

- 불리언 타입으로 변환
1. Boolean('x') //true
2. Boolean('') // false

#### 단추평가
- 논리 연산자를 사용한 단축 평가
  단축평가: 표현식을 평가하는 도중에 평가 결과가 확정된 경우 나머지 평가과정을 생략하는 것
  
  - 객체를 가리키기를 기대하는 변수가 null 또는 undefined가 아닌지 확인하고 프로퍼티를 참고할 때
  ```
  var elem = null;
  var value = elem.value; // TypeError
  ```
  이때 단축평가를 사용하면?
  
  ```
  var elem = null;
  var value = elem && elem.value; //null
  - 함수 매개변수에 기본 값을 설정할 때 
    : 함수를 호출할 때 인수를 전달하지 않으면 매개변수에는 undefined 가 할당된다. 이때 단축평가를 사용해 매개 변수의 기본값을 설정하면 undefined로 인해 발생할 수 있는 에러를 방지할 수 있다
  ```
  function getStringLength(str){
  str = str||'';
  return str.length;
  }
  
  getStringLength(); //0
  getStringLength('hi'); //2
  
  //ES6의 매개 변수의 기본값 설정
  function getStringLength(str = ''){
  return str.length;
  }
  
  getStringLength(); //0
  getStringLength('hi'); //2


#10장 객체리터럴

객체는 프로퍼티와 메서드로 구성된 집합체!
원시 값을 제외한 나머지 값 (함수, 배열, 정규 표현식 등)은 모두 객체다
원시 타입은 단 하나의 값만 나타내지만 객체 타입은 다양한 타입의 값(원시 값 또는 다른 객체)를 하나의 단위로 구성한 복합적인 자료구조다.
원시 타입의 값, 즉 원시 값은 변경 불가능한 값이지만 개체 타입의 값, 즉 객체는 변경 가능한 값이다.

### 객체와 함수
자바스크립트의 객체는 함수와 밀접한 관계를 가진다. 함수로 객체를 생성하기도 하며 함수 자체가 객체이기도 하다. 자바스크립트 에서 함수와 객체는 분리해서 생각할 수 없는 개념이다. 즉, 객체를 이해해야 함수를 제대로 이해할 수 있고, 반대로 함수를 이해해 야 객체를 정확히 이해할 수 있다.
따라서 객체와 함수를 분리해서 설명하는 것은 옳지 않지만 책의 구성상 객체와 함수를 번갈아 가며 설명하고자 한다. 프로그래밍 언어 자체에는 순서가 없고 서로 물고 물리는 순환 구조가 있어서 잘 이해되지 않는 개념이 나오면 멈추지 말고 일단은 다음으로 넘어가는 것도 한 가지 방법이다. 가급적 상위 개념을 먼저 살펴보고, 이를 기반으로 좀 더 복잡한 개념을 살펴보기로 하자.
```
var counter = {
	num : 0,    -> property , 숫자가 아닌 경우 ' 사용
	increase: function(){     --> method
		this.num++
	}
}
* function 키워드 생력 가능
increase() {
	this.num++
}
...> counter.increse()
```

### 객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성된다.
[ 예제 10-03 )
```
var person = {
//프로퍼티 키는 name, 프로퍼티 값은 ' Lee'
name: 'Lee',
//프로퍼티 키는 age, 프로퍼티 값은 20
age: 20
};
```
프로퍼티를 나열할 때는 쉼표(,)로 구분한다. 일반적으로 마지막 프로퍼티 뒤에는 쉼표를 사용하지 않으나 사용해도 좋다.
프로퍼티 키와 프로퍼티 값으로 사용할 수 있는 값은 다음과 같다.
• 프로퍼티 키: 빈 문자열을 포함하는 모든 문자열 또는 심벌 값
• 프로퍼티 값. 자바스크립트에서 사용할 수 있는 모든 값

빈 문자열도 프로커티 키로 사용가능
'-'를 키에 넣을 경우 ''로 감싸줘야함
이미 존재하는 프로퍼티 key 중복 선언시 나중에 선언한 것이 덮어씀


- 메서드
: 프로퍼티 값이 함수일 경우 일반 함수와 구분하기 위해 메서드 method라고 부른다. 
예제 10-11
```
var circle = {
radius: 5, // 4 프로퍼티
// 원의 지름
getDiameter: function () { // 4 메서드
return 2 * this.radius; // this는 circle을 가리킨다.
}
};
console.log(circle.getDiameter()); // 10
```
메서드 내부에서 사용한 this 키워드는 객체 자신(위 예제에서는 circle 객체)

- 프로퍼티 접근
대괄호 접근 연산자 내부에 지정하는 프로퍼티 키느 반드시 따옴표로 감싼 문자열이어야 한다. 
객체에 존재하지 않는 프로퍼티에 접근하면 undefined를 반환한다.

- 프로퍼티 삭제
```
var person = {
  name: 'Lee'
}

person.age = 20;

- 계산된 프로퍼티 이름
문자열 또는 문자열로 타입 변환할 수 있는 값으로 평가되는 표현식을 사용해 프로퍼티 키를 동적으로 생성 할 수도 있다. 단, 프로퍼티 키로 사용할 표현식을 대괄호(.... 1)로 묶어야 한다. 이를 계산된 프로퍼티 이름 computed property name이라 한다.
ESS에서 계산된 프로퍼티 이름으로 프로퍼티 키를 동적 생성하려면 객체 리터럴 외부에서 대괄호([.... 1) 표 기법을 사용해야 한다.
( 예제 10-21 ]
```
// ES5
var prefix = 'prop';
var i = 0;
var obj = {}; //계산된 프로퍼티 이름으로 프로퍼티 키 동적 생성
obj[prefix + '-' + ++i] = i;
obj[prefix + '-' + ++i] = i;
obj[prefix + '-' + ++i] = i;
console.log(obj); // {prop-1: 1, prop-2: 2, prop-3: 3}
```

- 메서드 축약 표현
```
const obj = {
  name: 'lee'.
  sayHi(){
    console.log('hi!' + this.name);
   }
 }
 obj.sayHi(); // hi! lee




